// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static Array divisionArray;


    /** Initializes the library. */
    function void init() {
        var int index;
        let divisionArray = Array.new(16);
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        while (index < 15) {
            let index = index + 1;
            let twoToThe[index] = twoToThe[index - 1] + twoToThe[index - 1];
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int l0;
        var int l1;
        var int l2;
        var int l3;
        var int l4;
        let l4 = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if ((x < y)) {
            let l1 = x;
            let x = y;
            let y = l1;
        }
        while ((l2 - 1) < (y - 1)) {
            if (~(twoToThe[l3] & y = 0)) {
                let l0 = l0 + x;
                let l2 = l2 + twoToThe[l3];
            }
            let x = x + x;
            let l3 = l3 + 1;
        }
        if (l4) {
            let l0 = -l0;
        }
        return l0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int l0;
        var int l1;
        var int l2;
        var int l3;
        if (y = 0) {
            do Sys.error(3);
        }
        let l2 = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let divisionArray[0] = Math.abs(y);
        let x = Math.abs(x);
        while ((l0 < 15) & (~l3)) {

            let l3 = (32767 - (divisionArray[l0] - 1)) < (divisionArray[l0] - 1);
            if (~(l3)) {
                let divisionArray[l0 + 1] = divisionArray[l0] + divisionArray[l0];
                let l3 = ((divisionArray[l0 + 1] - 1) > (x - 1));
                if (~l3) {
                     let l0 = l0 + 1;
                }
            }
        }
        while ((l0 > -1)) {
            if (~((divisionArray[l0] - 1) > (x - 1))) {
                let l1 = l1 + twoToThe[l0];
                let x = x - divisionArray[l0];
            }
            let l0 = l0 - 1;
        }
        if (l2) {
            let l1 = -l1;
        }
        return l1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int l0;
        var int l1;
        var int l2;
        var int l3;
        if (x < 0) {
            do Sys.error(4);
        }
        let l0 = 7;
        while (l0 > -1) {
            let l1 = l3 + twoToThe[l0];
            let l2 = Math.multiply(l1, l1);
            if (~(l2 > x) & ~(l2 < 0)) {
                let l3 = l1;
            }
            let l0 = l0 - 1;
        }
        return l3;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            let b = a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            let b = a;
        }
        return b;
    }
}
