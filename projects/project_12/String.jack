// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int arraySize;
    field Array string;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength > 0) {
            let string = Array.new(maxLength);
        }
        let arraySize = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (arraySize > 0) {
            do string.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(15);
        }
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > length) | (j = length)) {
            do Sys.error(16);
        }
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = arraySize) {
            do Sys.error(17);
        }
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int a0;
        var int a1;
        var int a2;
        var int a3;
        var int a4;
        if (length = 0) {
            return 0;
        }
        let a3 = ~0;
        if (string[0] = 45) { //negative string
            let a4 = ~0;
            let a0 = 1;
        }
        while((a0 < length) & (a3)) {
            let a2 = string[a0] - 48;
            let a3 = ~((a2 < 0) | (a2 > 9));
            if (a3) {
                let a1 = Math.multiply(a1, 10) + a2;
                let a0 = a0 + 1;
            }
        }
        if (a4) {
            let a1 = -a1;
        }
        return a1;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int a0;
        var int a1;
        var Array a2;
        var int a3;
        if (arraySize = 0) {
            do Sys.error(19);
        }
        let a2 = Array.new(6);
        if (val < 0) {
            let a3 = ~0;
            let val = -val;
        }
        let a1 = val;
        while((a1 > 0)) {
            let a1 = Math.divide(val, 10);
            let a2[a0] = 48 + (val - Math.multiply(a1, 10));
            let a0 = a0 + 1;
            let val = a1;
        }
        if (a3) {
            let a2[a0] = 45;
            let a0 = a0 + 1;
        }
        //a0 + a2
        if (arraySize < a0) {
            do Sys.error(19);
        }
        if (a0 = 0) {
            let string[0] = 48;
            let length = 1;
        } else {
            let length = 0;
            while (length < a0) {
                let string[length] = a2[a0 - (length + 1)];
                let length = length + 1;
            }
        }
        do a2.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
